AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda + API Gateway using SAM

Parameters:
  ExistingWeeklyTopic:
    Type: String
    Default: arn:aws:sns:us-east-1:259623776412:WeeklyPlaylistUpdates

Resources:
  PlaylistAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: PlaylistAPI
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - DELETE
          - OPTIONS
        AllowHeaders:
          - "*"
        AllowOrigins:
          - http://localhost:5173
          - https://main.d37vhm5bmnvd3f.amplifyapp.com

  # Read Playlist
  ReadPlaylistFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ReadPlaylistFunction
      Handler: index.handler
      Runtime: nodejs22.x
      CodeUri: Read/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: tune_out
      Events:
        ApiForMyApp:
          Type: HttpApi
          Properties:
            Path: /readPlaylist
            Method: GET
            ApiId: !Ref PlaylistAPI

  # Delete Playlist
  DeletePlaylistFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeletePlaylistFunction
      Handler: index.handler
      Runtime: nodejs22.x
      CodeUri: Delete/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: tune_out
      Events:
        ApiForMyApp:
          Type: HttpApi
          Properties:
            Path: /DeletePlaylist
            Method: DELETE
            ApiId: !Ref PlaylistAPI

    #Create Playlist
  CreatePlaylistFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreatePlaylistFunction
      Handler: index.handler
      Runtime: nodejs22.x
      CodeUri: Create/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: tune_out
      Events:
        ApiForMyApp:
          Type: HttpApi
          Properties:
            Path: /CreatePlaylist
            Method: POST
            ApiId: !Ref PlaylistAPI

  # Update Playlist
  UpdatePlaylistFunction:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: UpdatePlaylistFunction
        Handler: index.handler
        Runtime: nodejs22.x
        CodeUri: Update/
        Policies:
          - DynamoDBCrudPolicy:
              TableName: tune_out
        Events:
          ApiForMyApp:
            Type: HttpApi
            Properties:
              Path: /UpdatePlaylist
              Method: POST
              ApiId: !Ref PlaylistAPI

  #Subscribe
  SubscribeFunction:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: SubscribeFunction
        Handler: index.handler 
        Runtime: nodejs22.x
        CodeUri: Subscribe/
        Policies:
           - Statement:
              Effect: Allow
              Action:
                - sns:Publish
                - sns:Subscribe
              Resource: !Ref ExistingWeeklyTopic
        Environment:
          Variables:
            WEEKLY_TOPIC_ARN: !Ref ExistingWeeklyTopic
        Events:
          SubscribeEvent:
            Type: HttpApi
            Properties:
              Path: /subscribe
              Method: POST
              ApiId: !Ref PlaylistAPI
  #Subscribe Topic Policy
  WeeklyPlaylistTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref ExistingWeeklyTopic
      PolicyDocument:
        Statement:
          - Sid: AllowLambdaSubscribe
            Effect: Allow
            Principal:
               Service: lambda.amazonaws.com
            Action: sns:Subscribe
            Resource: !Ref ExistingWeeklyTopic
  #Weekly Updates- publisher lambda to send message
  WeeklyUpdatePublisherFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: WeeklyUpdatePublisher
      Handler: index.handler
      Runtime: nodejs22.x
      CodeUri: Publisher/
      Environment:
        Variables:
          WEEKLY_TOPIC_ARN: !Ref ExistingWeeklyTopic
      Policies:
        - DynamoDBReadPolicy:
            TableName: tune_out
        - Statement:
            Effect: Allow
            Action: sns:Publish
            Resource: !Ref ExistingWeeklyTopic
  #Event Bridge Scheduler (run publisher lambda once a week)
  WeeklyUpdateSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: rate(7 days)
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !GetAtt WeeklyUpdatePublisherFunction.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
  #let schedular invoke lambda (permission for eventbridge)
  SchedulerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowLambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt WeeklyUpdatePublisherFunction.Arn


Outputs:
  ApiUrl:
    Description: "HTTP API endpoint base URL"
    Value: !Sub "https://${PlaylistAPI}.execute-api.${AWS::Region}.amazonaws.com"